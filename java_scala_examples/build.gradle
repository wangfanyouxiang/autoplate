apply plugin: 'java'
apply plugin: 'scala'

def package_name = 'java_scala_examples'
def package_path = 'com.qeautos'
def package_fullname = package_path + '.' + package_name
def package_fullpath = package_fullname.replaceAll(/\./, '/')

version = '1.0'

defaultTasks 'Jars'

task LibJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': package_fullname,
                'Implementation-Version': version
    }
    baseName = package_name + '-LibJar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task JavaMain(type: Jar) {
    manifest {
        attributes 'Implementation-Title': package_fullname,
                'Implementation-Version': version,
                'Main-Class': package_fullname + '.JavaMain'
    }
    baseName = package_name + '-JavaMain'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task ScalaMain(type: Jar) {
    manifest {
        attributes 'Implementation-Title': package_fullname,
                'Implementation-Version': version,
                'Main-Class': package_fullname + '.ScalaMain'
    }
    baseName = package_name + '-ScalaMain'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task Jars {
    dependsOn LibJar
    dependsOn JavaMain
    dependsOn ScalaMain
}

// java -cp ./build/libs/java_scala_examples-LibJar-1.0.jar com.qeautos.java_scala_examples.JavaMain
task RunLibJava(type: JavaExec) {
    dependsOn LibJar
    classpath = sourceSets.main.runtimeClasspath
    main = package_fullname + '.JavaMain'
    args 'void'
}

// java -cp ./build/libs/java_scala_examples-LibJar-1.0.jar com.qeautos.java_scala_examples.ScalaMain
task RunLibScala(type: JavaExec) {
    dependsOn LibJar
    classpath = sourceSets.main.runtimeClasspath
    main = package_fullname + '.ScalaMain'
    args 'void'
}

// java -jar ./build/libs/java_scala_examples-JavaMain-1.0.jar
task RunMainJava(dependsOn: JavaMain)<<{
    javaexec { main="-jar"; args "./build/libs/java_scala_examples-JavaMain-1.0.jar" } 
}

// java -jar ./build/libs/java_scala_examples-ScalaMain-1.0.jar
task RunMainScala(dependsOn: ScalaMain)<<{
    javaexec { main="-jar"; args "./build/libs/java_scala_examples-ScalaMain-1.0.jar" } 
}

task Run(dependsOn: Jars) {
    dependsOn RunLibJava
    dependsOn RunLibScala
    dependsOn RunMainJava
    dependsOn RunMainScala
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.11.+'
    testCompile 'org.testng:testng:6.8.+'
}

sourceSets.main.scala.srcDirs = ['src/main/java/' + package_fullpath, 'src/main/scala/' + package_fullpath]
sourceSets.main.java.srcDirs = []
//sourceSets.test.scala.srcDirs ['src/test/java/' + package_fullpath, 'src/test/scala/' + package_fullpath]
//sourceSets.test.java.srcDirs = []

test {
    // enable TestNG support (default is JUnit)
    useTestNG() {
        useDefaultListeners = true
    }

    // failed test case will break the build
    ignoreFailures = false

    // always run re-test
    outputs.upToDateWhen { false }

    // set a system property for the test JVM(s)
    //systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    //include 'com/qeautos/**'
    //exclude 'org/boo/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    //jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

