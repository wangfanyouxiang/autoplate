plugins {
    id 'java'
    id 'com.moowork.node' version '0.8'
}

def package_name = 'newman_examples'
def package_path = 'com.qeautos'
def package_fullname = package_path + '.' + package_name
def package_fullpath = package_fullname.replaceAll(/\./, '/')

version = '1.0'

defaultTasks 'Jars'

task LibJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': package_fullname,
                   'Implementation-Version': version
    }
    baseName = package_name + '-LibJar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task Jars {
    dependsOn LibJar
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.apache.commons:commons-exec:1.+'
    compile 'log4j:log4j:1.2.+'
    testCompile 'org.testng:testng:6.8.+'
}

sourceSets.main.java.srcDirs = ['src/main/java/']
sourceSets.test.java.srcDirs = ['src/test/java/']

task createNodeDir {
    def node_moduleDir = new File('node_modules/npm')
    node_moduleDir.mkdirs()
}
//task installNewman needs env APPDATA=node_modules be set.
//TODO: figure out how to set it here.
task installNewman(type: NpmTask) {
    dependsOn createNodeDir
    args = ['install', 'newman', '--save-dev']
}

test {
  // enable TestNG support (default is JUnit)
  useTestNG() {
    useDefaultListeners = true
  }

  // faile test case will break the build
  ignoreFailures = false

  // always run re-test
  outputs.upToDateWhen { false }

  // set a system property for the test JVM(s)
  //systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  //include 'com/qeautos/**'
  //exclude 'org/boo/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  //jvmArgs '-XX:MaxPermSize=256m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}
